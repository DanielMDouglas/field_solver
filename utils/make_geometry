#!/usr/bin/python

import numpy as np
import sys
from json.encoder import JSONEncoder

enc = JSONEncoder(separators=(',', ': '),
                  indent = 4,
                  sort_keys = True)

def make_filled_kapton():
    xmin = 0
    xmax = 10
    ymin = 0
    ymax = 10
    zmin = 0
    zmax = 10

    wall_thickness = 0.1

    wall_buffer = 0.2
    electrode_thickness = 0.2
    
    g10_thickness = 0.2
    kapton_thickness = 0.2
    
    top_level = {
        "name": "filled kapton",
        "periodicity": {"x": False,
                        "y": False,
                        "z": True},
        "bounds": {"xmin": xmin,
                   "xmax": xmax,
                   "ymin": ymin,
                   "ymax": ymax,
                   "zmin": zmin,
                   "zmax": zmax}}

    volumes = []
    # cryostat walls (grounded)
    volumes.append({"type": "conductor",
                    "xmin": xmin,
                    "xmax": xmax,
                    "ymin": ymin, 
                    "ymax": ymax,
                    "zmin": zmin,
                    "zmax": zmin + wall_thickness,
                    "voltage": {"function_name": "constant",
                                "args": [0]}})
    volumes.append({"type": "conductor",
                    "xmin": xmin,
                    "xmax": xmax,
                    "ymin": ymin, 
                    "ymax": ymax,
                    "zmin": zmax - wall_thickness,
                    "zmax": zmax,
                    "voltage": {"function_name": "constant",
                                "args": [0]}})
    volumes.append({"type": "conductor",
                    "xmin": xmin,
                    "xmax": xmax,
                    "ymin": ymin, 
                    "ymax": ymin + wall_thickness,
                    "zmin": zmin,
                    "zmax": zmax,
                    "voltage": {"function_name": "constant",
                                "args": [0]}})
    volumes.append({"type": "conductor",
                    "xmin": xmin,
                    "xmax": xmax,
                    "ymin": ymax - wall_thickness, 
                    "ymax": ymax,
                    "zmin": zmin,
                    "zmax": zmax,
                    "voltage": {"function_name": "constant",
                                "args": [0]}})
    volumes.append({"type": "conductor",
                    "xmin": xmin,
                    "xmax": xmin + wall_thickness,
                    "ymin": ymin, 
                    "ymax": ymax,
                    "zmin": zmin,
                    "zmax": zmax,
                    "voltage": {"function_name": "constant",
                                "args": [0]}})
    volumes.append({"type": "conductor",
                    "xmin": xmax - wall_thickness,
                    "xmax": xmax,
                    "ymin": ymin, 
                    "ymax": ymax,
                    "zmin": zmin,
                    "zmax": zmax,
                    "voltage": {"function_name": "constant",
                                "args": [0]}})
    
    # cathode, close to zmax
    volumes.append({"type": "conductor",
                    "xmin": xmin + wall_thickness + wall_buffer,
                    "xmax": xmax - wall_thickness - wall_buffer,
                    "ymin": ymin + wall_thickness + wall_buffer,
                    "ymax": ymax - wall_thickness - wall_buffer,
                    "zmin": zmax - wall_thickness - wall_buffer - electrode_thickness/2,
                    "zmax": zmax - wall_thickness - wall_buffer + electrode_thickness/2,
                    "voltage": {"function_name": "constant",
                                "args": [273]}})

    # anode, close to zmin
    volumes.append({"type": "conductor",
                    "xmin": xmin + wall_thickness + wall_buffer,
                    "xmax": xmax - wall_thickness - wall_buffer,
                    "ymin": ymin + wall_thickness + wall_buffer,
                    "ymax": ymax - wall_thickness - wall_buffer,
                    "zmin": zmin + wall_thickness + wall_buffer - electrode_thickness/2,
                    "zmax": zmin + wall_thickness + wall_buffer + electrode_thickness/2,
                    "voltage": {"function_name": "constant",
                                "args": [0]}})

    top_level.update({"volumes": volumes})
    
    print enc.encode(top_level)

if __name__ == '__main__':
    make_filled_kapton()
