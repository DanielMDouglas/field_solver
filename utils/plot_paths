#!/usr/bin/python

import numpy as np
from scipy.interpolate import RegularGridInterpolator
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.collections import LineCollection
import sys

def read_csv(infileName):
    data = np.loadtxt(infileName, skiprows = 1, delimiter = ',')
    t = data[:,0]
    x = data[:,1]
    y = data[:,2]
    z = data[:,3]
    # values = np.reshape(data[:,3], (x.size, y.size, z.size), order='C')

    return t, x, y, z

# def get_potential(x, y, z):

def plot_wires():
    wireX = np.concatenate([3*[i] for i in np.linspace(-0.9, 0.9, 7)])
    wireY = np.array([i for i in np.linspace(0, 0.6, 3)]*7)

    plt.scatter(wireX, wireY, color = 'red')

def plot_pads(ax):
    padSize = 0.2
    padThickness = 0.05
    spacing = 0.2
    xLow = -1.4
    xHigh = 1.4
    # nPadsPerRow = int((xHigh - xLow)/(padSize + spacing))
    nPadsPerRow = 7
    # pads
    for i in range(nPadsPerRow):
        rect = patches.Rectangle((xLow + spacing/2 + (padSize + spacing)*i,
                                  -padThickness/2),
                                 padSize,
                                 padThickness,
                                 edgecolor = 'r',
                                 facecolor = 'r')
        ax.add_patch(rect)
    # # left half-space
    # rect = patches.Rectangle((xLow,
    #                           -padThickness/2),
    #                          spacing/2,
    #                          padThickness,
    #                          edgecolor = 'y',
    #                          facecolor = 'y')
    # ax.add_patch(rect)
    # # right half-space
    # rect = patches.Rectangle((xHigh - spacing/2,
    #                           -padThickness/2),
    #                          spacing/2,
    #                          padThickness,
    #                          edgecolor = 'y',
    #                          facecolor = 'y')
    # ax.add_patch(rect)
        
    # for i in range(nPadsPerRow-1):
    #     rect = patches.Rectangle((xLow + spacing/2 + padSize + (padSize + spacing)*i,
    #                               -padThickness/2),
    #                              spacing,
    #                              padThickness,
    #                              edgecolor = 'y',
    #                              facecolor = 'y')
    #     ax.add_patch(rect)

    # rect = patches.Rectangle((xLow + spacing + padSize + (padSize + spacing)*i,
    #                           -0.025),
    #                          spacing,
    #                          0.05,
    #                          edgecolor = 'y',
    #                          facecolor = 'y')
    # ax.add_patch(rect)


if __name__ == '__main__':
    infileNames = sys.argv[1:]
    if not infileNames:
        print "Please specify the file to use!"
        print "Usage: drift_path [fieldData.dat]"

    fig, ax = plt.subplots(1)
        
    for infileName in infileNames:
        t, x, y, z = read_csv(infileName)

        # plt.plot(patharray[:,0], patharray[:,2], c = 'blue')
        # plt.plot(x, z, c = 'blue')
        points = np.array([x, z]).T.reshape(-1, 1, 2)
        segments = np.concatenate([points[:-1], points[1:]], axis=1)

        # Create a continuous norm to map from data points to colors
        # norm = plt.Normalize(t.min(), t.max())
        if x[-1] > 0.1:
            cmap = 'magma'
        else:
            cmap = 'viridis'
        lc = LineCollection(segments,
                            cmap=cmap,
                            # norm=norm,
        )
        # Set the values used for colormapping
        lc.set_array(t)
        lc.set_linewidth(2)
        line = plt.gca().add_collection(lc)
        # fig.colorbar(line, ax=axs[0])

    cb = plt.colorbar(line)
    cb.set_label(r't [$\mu$s]')
    plot_pads(ax)
    # plot_wires()
    
    plt.xlabel(r'x [cm]')
    plt.ylabel(r'z [cm]')

    plt.xlim(-0.005, 0.2)
    # plt.colorbar()
    
    plt.show()
