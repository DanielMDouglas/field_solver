#!/usr/bin/python

import numpy as np
from scipy.interpolate import RegularGridInterpolator
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.collections import LineCollection
import sys
from json import decoder

def read_csv(infileName):
    data = np.loadtxt(infileName, skiprows = 1, delimiter = ',')
    t = data[:,0]
    x = data[:,1]
    y = data[:,2]
    z = data[:,3]

    return t, x, y, z

# def get_potential(x, y, z):

def draw_geo(infileName, ax):
    raw_text = file(infileName).read()
    dec = decoder.JSONDecoder()
    json = dec.decode(raw_text)

    for volume in json["volumes"]:
        if volume["description"] == "central pad" or volume["description"] == "other pad":
            ll_corner = (volume["xmin"], volume["zmin"])
            width = volume["xmax"] - volume["xmin"]
            thickness = volume["zmax"] - volume["zmin"]
            rect = patches.Rectangle(ll_corner,
                                     width,
                                     thickness,
                                     edgecolor = 'r',
                                     facecolor = 'r')
            ax.add_patch(rect)

    ax.set_xlim(json["bounds"]["xmin"], json["bounds"]["xmax"])
    ax.set_ylim(json["bounds"]["zmin"], json["bounds"]["zmax"])

if __name__ == '__main__':
    geoFileName = sys.argv[1]
    driftFileNames = sys.argv[2:]
    if not driftFileNames:
        print "Please specify the file to use!"
        print "Usage: drift_path [fieldData.dat]"

    fig, ax = plt.subplots(1)

    for infileName in driftFileNames:
        t, x, y, z = read_csv(infileName)

        # plt.plot(patharray[:,0], patharray[:,2], c = 'blue')
        # plt.plot(x, z, c = 'blue')
        points = np.array([x, z]).T.reshape(-1, 1, 2)
        segments = np.concatenate([points[:-1], points[1:]], axis=1)

        # Create a continuous norm to map from data points to colors
        # norm = plt.Normalize(t.min(), t.max())
        # if x[-1] > 0.1:
        #     cmap = 'magma'
        # else:
        cmap = 'viridis'
        lc = LineCollection(segments,
                            cmap=cmap,
                            # norm=norm,
        )
        # Set the values used for colormapping
        lc.set_array(t)
        lc.set_linewidth(2)
        line = plt.gca().add_collection(lc)
        # fig.colorbar(line, ax=axs[0])

    cb = plt.colorbar(line)
    cb.set_label(r't [$\mu$s]')
    draw_geo(geoFileName, ax)
    # plot_wires()
    
    plt.xlabel(r'x [cm]')
    plt.ylabel(r'z [cm]')

    # plt.colorbar()
    
    plt.show()
