#!/usr/bin/python

import numpy as np
from json import encoder

volumes = [{"type": "conductor",
	    "xmin": -1,
	    "xmax": -0.98,
	    "ymin": -1,
	    "ymax": 1,
	    "zmin": -1,
	    "zmax": 1,
	    "voltage": {"function_name": "constant",
			"args": [0]},
            "description": "wall"},
	   {"type": "conductor",
	    "xmin": 0.98,
	    "xmax": 1,
	    "ymin": -1,
	    "ymax": 1,
            "zmin": -1,
	    "zmax": 1,
	    "voltage": {"function_name": "constant",
			"args": [0]},
	    "description": "wall"},
	   {"type": "conductor",
	    "xmin": -1,
	    "xmax": 1,
	    "ymin": -1,
	    "ymax": -0.98,
	    "zmin": -1,
	    "zmax": 1,
	    "voltage": {"function_name": "constant",
			"args": [0]},
	    "description": "wall"},
	   {"type": "conductor",
	    "xmin": -1,
	    "xmax": 1,
	    "ymin": 0.98,
	    "ymax": 1,
	    "zmin": -1,
	    "zmax": 1,
	    "voltage": {"function_name": "constant",
			"args": [0]},
	    "description": "wall"},
	   {"type": "conductor",
	    "xmin": -1,
	    "xmax": 1,
	    "ymin": -1,
	    "ymax": 1,
	    "zmin": -1,
	    "zmax": -0.98,
	    "voltage": {"function_name": "constant",
			"args": [0]},
	    "description": "wall"},
	   {"type": "conductor",
	    "xmin": -1,
	    "xmax": 1,
	    "ymin": -1,
	    "ymax": 1,
	    "zmin": 0.98,
	    "zmax": 1,
	    "voltage": {"function_name": "constant",
			"args": [0]},
	    "description": "wall"},
	   {"type": "conductor",
	    "xmin": -0.9,
	    "xmax": 0.9,
	    "ymin": -0.9,
	    "ymax": 0.9,
	    "zmin": 0.89,
	    "zmax": 0.91,
	    "voltage": {"function_name": "constant",
		        "args": [0]},
	    "description": "anode plane"},
	   {"type": "conductor",
	    "xmin": -0.9,
	    "xmax": 0.9,
	    "ymin": -0.9,
	    "ymax": 0.9,
	    "zmin": -0.01,
	    "zmax": 0.01,
	    "voltage": {"function_name": "constant",
			"args": [-1]},
	    "description": "cathode plane"},
	   {"type": "conductor",
	    "xmin": -0.9,
	    "xmax": 0.9,
	    "ymin": -0.9,
	    "ymax": 0.9,
	    "zmin": -0.91,
	    "zmax": -0.89,
	    "voltage": {"function_name": "constant",
			"args": [0]},
	    "description": "anode plane"}]

Nstrips = 5
fill_factor = 0.8

beginning = -0.9
end = 0.9

segment_width = (end - beginning)/float(Nstrips)
cond_width = segment_width*fill_factor/2.

for i in range(Nstrips):
    # print beginning + i*segment_width
    volumes.append({"type": "conductor",
                    "xmin": -0.91,
                    "xmax": -0.89,
                    "ymin": beginning + i*segment_width,
                    "ymax": beginning + i*segment_width + cond_width,
                    "zmin": 0,
                    "zmax": 0.9,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, 1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": -0.91,
                    "xmax": -0.89,
                    "ymin": beginning + (i+1)*segment_width - cond_width,
                    "ymax": beginning + (i+1)*segment_width,
                    "zmin": 0,
                    "zmax": 0.9,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, 1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": 0.89,
                    "xmax": 0.91,
                    "ymin": beginning + i*segment_width,
                    "ymax": beginning + i*segment_width + cond_width,
                    "zmin": 0,
                    "zmax": 0.9,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, 1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": 0.89,
                    "xmax": 0.91,
                    "ymin": beginning + (i+1)*segment_width - cond_width,
                    "ymax": beginning + (i+1)*segment_width,
                    "zmin": 0,
                    "zmax": 0.9,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, 1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": beginning + i*segment_width,
                    "xmax": beginning + i*segment_width + cond_width,
                    "ymin": -0.91,
                    "ymax": -0.89,
                    "zmin": 0,
                    "zmax": 0.9,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, 1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": beginning + (i+1)*segment_width - cond_width,
                    "xmax": beginning + (i+1)*segment_width,
                    "ymin": -0.91,
                    "ymax": -0.89,
                    "zmin": 0,
                    "zmax": 0.9,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, 1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": beginning + i*segment_width,
                    "xmax": beginning + i*segment_width + cond_width,
                    "ymin": 0.89,
                    "ymax": 0.91,
                    "zmin": 0,
                    "zmax": 0.9,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, 1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": beginning + (i+1)*segment_width - cond_width,
                    "xmax": beginning + (i+1)*segment_width,
                    "ymin": 0.89,
                    "ymax": 0.91,
                    "zmin": 0,
                    "zmax": 0.9,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, 1.111111111]},
                    "description": "field cage"})

    volumes.append({"type": "conductor",
                    "xmin": -0.91,
                    "xmax": -0.89,
                    "ymin": beginning + i*segment_width,
                    "ymax": beginning + i*segment_width + cond_width,
                    "zmin": -0.9,
                    "zmax": 0,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, -1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": -0.91,
                    "xmax": -0.89,
                    "ymin": beginning + (i+1)*segment_width - cond_width,
                    "ymax": beginning + (i+1)*segment_width,
                    "zmin": -0.9,
                    "zmax": 0,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, -1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": 0.89,
                    "xmax": 0.91,
                    "ymin": beginning + i*segment_width,
                    "ymax": beginning + i*segment_width + cond_width,
                    "zmin": -0.9,
                    "zmax": 0,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, -1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": 0.89,
                    "xmax": 0.91,
                    "ymin": beginning + (i+1)*segment_width - cond_width,
                    "ymax": beginning + (i+1)*segment_width,
                    "zmin": -0.9,
                    "zmax": 0,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, -1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": beginning + i*segment_width,
                    "xmax": beginning + i*segment_width + cond_width,
                    "ymin": -0.91,
                    "ymax": -0.89,
                    "zmin": -0.9,
                    "zmax": 0,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, -1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": beginning + (i+1)*segment_width - cond_width,
                    "xmax": beginning + (i+1)*segment_width,
                    "ymin": -0.91,
                    "ymax": -0.89,
                    "zmin": -0.9,
                    "zmax": 0,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, -1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": beginning + i*segment_width,
                    "xmax": beginning + i*segment_width + cond_width,
                    "ymin": 0.89,
                    "ymax": 0.91,
                    "zmin": -0.9,
                    "zmax": 0,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, -1.111111111]},
                    "description": "field cage"})
    volumes.append({"type": "conductor",
                    "xmin": beginning + (i+1)*segment_width - cond_width,
                    "xmax": beginning + (i+1)*segment_width,
                    "ymin": 0.89,
                    "ymax": 0.91,
                    "zmin": -0.9,
                    "zmax": 0,
                    "voltage": {"function_name": "linear",
                                "args": [-1, 0, 0, -1.111111111]},
                    "description": "field cage"})


volumes.append({"type": "dielectric",
		"xmin": -1,
		"xmax": 1,
		"ymin": -1,
		"ymax": 1,
		"zmin": -1,
		"zmax": 1,
		"permittivity": {"function_name": "constant",
				 "args": [1]},
		"conductivity": {"function_name": "constant",
				 "args": [0]},
		"description": "dielectric"})

top_level = {"name": "tpc with partial cage",
             "periodicity": {"x": False,
                             "y": False,
                             "z": False},
             "bounds": {"xmin": -1,
                        "xmax": 1,
                        "ymin": -1,
                        "ymax": 1,
                        "zmin": -1,
                        "zmax": 1},
             "volumes": volumes}

enc = encoder.JSONEncoder(separators=(',', ': '),
                          indent = 4,
                          sort_keys = True)

print enc.encode(top_level)
