#!/usr/bin/python

import numpy as np
import sys

e = 1.603e-19

if __name__ == '__main__':
    infileName = sys.argv[1]
    outfileName = sys.argv[2]
    if not infileName:
        print "Please specify the current file to patch!"
        print "Usage: patch_current [current.dat] [outfile.dat]"

    dt = 5.e-5
    newDt = 5.e-5

    rebinF = int(newDt/dt)
    
    unpatchedT, unpatchedCurrent = np.loadtxt(infileName)[1:].T
    pad = (rebinF - unpatchedCurrent.shape[0]%rebinF)*[unpatchedCurrent[0]]
    rebinnedCurrent = np.sum(np.concatenate([pad, unpatchedCurrent]).reshape(unpatchedCurrent.shape[0]/rebinF + 1, rebinF), axis = 1)
    rebinnedCurrent *= dt/newDt
    rebinnedT = newDt*np.arange(len(rebinnedCurrent))
    
    tailStart = 5
    
    tailT = -1*np.arange(0, tailStart, newDt)[::-1][:-1]

    # A = unpatchedCurrent[1]
    # didt = (unpatchedCurrent[2] - unpatchedCurrent[1])/dt
    # B = didt/A
    # tail = A*np.exp(B*tailT)

    # patchedT = np.concatenate([tailT, unpatchedT[1:]])
    # patchedCurrent = np.concatenate([tail, unpatchedCurrent[1:]])

    A = rebinnedCurrent[0]
    didt = (rebinnedCurrent[1] - rebinnedCurrent[0])/newDt
    B = didt/A
    tail = A*np.exp(B*tailT)

    # finalT = rebinnedT[-1] + newDt + np.arange(0, 5 - rebinnedT[-1], newDt)
    # finalZeros = np.zeros_like(finalT)

    # patchedT = np.concatenate([tailT, rebinnedT, finalT])
    # patchedCurrent = np.concatenate([tail, rebinnedCurrent, finalZeros])
    # patchedT = np.concatenate([tailT, rebinnedT])
    # patchedCurrent = np.concatenate([tail, rebinnedCurrent])
    patchedT =  rebinnedT
    patchedCurrent = rebinnedCurrent

    patchedCurrent *= e/(np.sum(patchedCurrent)*newDt)

    np.savetxt(outfileName, np.array([patchedT, patchedCurrent]).T)
