#!/usr/bin/python

import numpy as np
import matplotlib.pyplot as plt
import sys

def read_csv(infileName):
    data = np.loadtxt(infileName, delimiter=',')
    x = np.unique(data[:,0])
    y = np.unique(data[:,1])
    z = np.unique(data[:,2])
    values = np.reshape(data[:,3], (x.size, y.size, z.size), order='C')
    
    return x, y, z, values

def choose_slice(x, y, z, values, choice):
    """
    pass the data as well as a 'choice' string
    the string should be similar to 
    z = 5
    or
    x = 2
    which defines a plane in units of pixel number
    """

    choice_var = choice.split('=')[0].strip()
    choice_val = int(choice.split('=')[1].strip())

    if choice_var == 'x':
        u = y
        v = z
        selec = values[choice_val,:,:]
    elif choice_var == 'y':
        u = z
        v = x
        selec = values[:,choice_val,:]
    elif choice_var == 'z':
        u = x
        v = y
        selec = values[:,:,choice_val]

    return u, v, selec

if __name__ == '__main__':
    infileNames = [arg for arg in sys.argv if ".dat" in arg]
    choice_string = sys.argv[-2]
    title = sys.argv[-1]
    
    if not infileNames:
        print "Please specify the file to plot from!"
        print "Usage: plot [fieldData.dat]"

        exit

    for infileName in infileNames:
        x, y, z, values = read_csv(infileName)
        u, v, selec = choose_slice(x, y, z, values, choice_string)

        if '-r' in sys.argv:
            val = sys.argv[sys.argv.index('-r') + 1]
            uMin = int(val.split(',')[0])
            uMax = int(val.split(',')[1])
            vMin = int(val.split(',')[2])
            vMax = int(val.split(',')[3])
        else:
            uMin = 0
            uMax = len(u)
            vMin = 0
            vMax = len(v)
        
        plt.figure()
        cmesh = plt.pcolormesh(v[vMin:vMax],
                               u[uMin:uMax],
                               selec.T[uMin:uMax, vMin:vMax],
                               cmap = 'Blues')
        cb = plt.colorbar()

        plt.contour(v[vMin:vMax],
                    u[uMin:uMax],
                    selec.T[uMin:uMax, vMin:vMax],
                    20)
        
        plt.title(title)
        plt.xlabel(r'$x$ [cm]')
        plt.ylabel(r'$z$ [cm]')

        if "-s" in sys.argv:
            plt.savefig(infileName.replace(".dat", ".png"))
        else:
            plt.show()
